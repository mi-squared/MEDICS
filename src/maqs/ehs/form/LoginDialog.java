package maqs.ehs.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.sigilent.business.util.StringUtils;
import maqs.ehs.util.AppProperties;
import maqs.ehs.util.SecurityUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class LoginDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonLogin;
    private JButton buttonCancel;
    private JPasswordField password;
    private JTextField username;
    private JLabel message;
    private JPanel mainPanel;
    private JLabel usernameLabel;
    private JLabel passwordLabel;
    private JLabel error;

    private MedicsUI parentForm;

    public LoginDialog() {
        setTitle( AppProperties.getAppTitleFull() );
        setContentPane( contentPane );
        setModal( true );
        getRootPane().setDefaultButton( buttonLogin );

        message.setText( "Welcome to " + AppProperties.getAppTitle() );
        error.setText( "" );

        buttonLogin.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                onOK();
            }
        } );

        buttonCancel.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                onCancel();
            }
        } );

// call onCancel() when cross is clicked
        setDefaultCloseOperation( DO_NOTHING_ON_CLOSE );
        addWindowListener( new WindowAdapter() {
            public void windowClosing( WindowEvent e ) {
                onCancel();
            }
        } );

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0 ), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT );

        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName() );
        } catch ( Exception e ) {
        }

        setResizable( false );

//        ImageIcon image = new ImageIcon( "C:\\Documents and Settings\\Aron Racho\\Desktop\\splash.jpg" );
//        JLabel background = new JLabel( image );
//        background.setBounds( 0, 0, image.getIconWidth(), image.getIconHeight() );
//        getLayeredPane().add( background, new Integer( Integer.MIN_VALUE ) );
        contentPane.setOpaque( false );
        setBackground( Color.WHITE );
        mainPanel.setOpaque( false );

//        usernameLabel.setForeground( Color.black );
//        passwordLabel.setForeground( Color.black );

        // Center the dialog
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = ( screenSize.width - getWidth() ) / 2;
        int y = ( screenSize.height - getHeight() ) / 2;
        setLocation( x - 100, y - 100 );

    }

    private boolean testLogin( String username, String password ) {
        if ( StringUtils.isEmpty( username ) ) {
            return false;
        }

        if ( StringUtils.isEmpty( password ) ) {
            return false;
        }

        if ( !SecurityUtil.testExportToServer() ) {
            return false;
        }

        if ( !SecurityUtil.testLocalEncrypt() ) {
            return false;
        }

        if ( !SecurityUtil.testLocalDecrypt() ) {
            return false;
        }


        return true;
    }

    private void onOK() {

        AppProperties.setPassPhrase( password.getText() );
        if ( testLogin( username.getText(), password.getText() ) ) {
            parentForm.init();
            parentForm.maximizeView();
            this.dispose();
        } else {
            error.setForeground( Color.red );
            error.setText( "Invalid Login - Please Try Again" );
        }

    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    public static LoginDialog createInstance( MedicsUI _parent ) {
        LoginDialog dialog = new LoginDialog();
        dialog.setParentForm( _parent );
        dialog.pack();
        dialog.setVisible( true );
        return dialog;
    }

    public MedicsUI getParentForm() {
        return parentForm;
    }

    public void setParentForm( MedicsUI parentForm ) {
        this.parentForm = parentForm;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout( new GridLayoutManager( 2, 1, new Insets( 10, 10, 10, 10 ), -1, -1 ) );
        contentPane.setBackground( new Color( -1 ) );
        contentPane.setMaximumSize( new Dimension( 270, 200 ) );
        contentPane.setMinimumSize( new Dimension( 270, 200 ) );
        contentPane.setOpaque( false );
        contentPane.setPreferredSize( new Dimension( 270, 200 ) );
        final JPanel panel1 = new JPanel();
        panel1.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel1.setBackground( new Color( -1 ) );
        panel1.setOpaque( false );
        contentPane.add( panel1, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, new Dimension( 24, -1 ), null, 0, false ) );
        final Spacer spacer1 = new Spacer();
        panel1.add( spacer1, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false ) );
        final JPanel panel2 = new JPanel();
        panel2.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1, true, false ) );
        panel2.setBackground( new Color( -1 ) );
        panel1.add( panel2, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        buttonLogin = new JButton();
        buttonLogin.setText( "Login" );
        panel2.add( buttonLogin, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
        buttonCancel = new JButton();
        buttonCancel.setText( "Cancel" );
        panel2.add( buttonCancel, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
        mainPanel = new JPanel();
        mainPanel.setLayout( new GridLayoutManager( 1, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        mainPanel.setBackground( new Color( -1 ) );
        contentPane.add( mainPanel, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension( 70, 50 ), null, 0, false ) );
        final JPanel panel3 = new JPanel();
        panel3.setLayout( new GridLayoutManager( 6, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel3.setBackground( new Color( -1 ) );
        panel3.setOpaque( false );
        mainPanel.add( panel3, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        final JPanel panel4 = new JPanel();
        panel4.setLayout( new GridLayoutManager( 2, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel4.setBackground( new Color( -1 ) );
        panel4.setOpaque( false );
        panel3.add( panel4, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        message = new JLabel();
        message.setBackground( new Color( -1 ) );
        message.setFont( new Font( message.getFont().getName(), Font.BOLD, 20 ) );
        message.setOpaque( true );
        message.setText( "Label" );
        panel4.add( message, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
        final Spacer spacer2 = new Spacer();
        panel4.add( spacer2, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension( -1, 10 ), new Dimension( -1, 10 ), new Dimension( -1, 10 ), 0, false ) );
        final Spacer spacer3 = new Spacer();
        panel3.add( spacer3, new GridConstraints( 5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false ) );
        final JPanel panel5 = new JPanel();
        panel5.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel5.setBackground( new Color( -1 ) );
        panel5.setOpaque( false );
        panel3.add( panel5, new GridConstraints( 2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        usernameLabel = new JLabel();
        usernameLabel.setBackground( new Color( -1 ) );
        usernameLabel.setDoubleBuffered( true );
        usernameLabel.setFont( new Font( usernameLabel.getFont().getName(), Font.BOLD, usernameLabel.getFont().getSize() ) );
        usernameLabel.setForeground( new Color( -16777216 ) );
        usernameLabel.setOpaque( true );
        usernameLabel.setText( "Username" );
        panel5.add( usernameLabel, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension( 60, -1 ), new Dimension( 60, -1 ), new Dimension( 60, -1 ), 0, false ) );
        username = new JTextField();
        panel5.add( username, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension( 150, -1 ), null, 0, false ) );
        final JPanel panel6 = new JPanel();
        panel6.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel6.setBackground( new Color( -1 ) );
        panel6.setOpaque( false );
        panel3.add( panel6, new GridConstraints( 4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        passwordLabel = new JLabel();
        passwordLabel.setBackground( new Color( -1 ) );
        passwordLabel.setFocusable( false );
        passwordLabel.setFont( new Font( passwordLabel.getFont().getName(), Font.BOLD, passwordLabel.getFont().getSize() ) );
        passwordLabel.setForeground( new Color( -16777216 ) );
        passwordLabel.setOpaque( true );
        passwordLabel.setText( "Password" );
        panel6.add( passwordLabel, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension( 60, -1 ), new Dimension( 60, -1 ), new Dimension( 60, -1 ), 0, false ) );
        password = new JPasswordField();
        panel6.add( password, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension( 150, -1 ), null, 0, false ) );
        final Spacer spacer4 = new Spacer();
        panel3.add( spacer4, new GridConstraints( 3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension( -1, 12 ), new Dimension( -1, 12 ), new Dimension( -1, 12 ), 0, false ) );
        final JPanel panel7 = new JPanel();
        panel7.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel7.setOpaque( false );
        panel3.add( panel7, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        final Spacer spacer5 = new Spacer();
        panel7.add( spacer5, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension( -1, 20 ), new Dimension( -1, 20 ), new Dimension( -1, 20 ), 0, false ) );
        error = new JLabel();
        error.setText( "Label" );
        panel7.add( error, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
