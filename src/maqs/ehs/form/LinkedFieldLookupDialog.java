package maqs.ehs.form;

import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.Spacer;
import com.sigilent.business.util.StringUtils;

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.List;

import maqs.ehs.patient.FieldSvc;
import maqs.ehs.patient.KeyedResource;
import maqs.ehs.patient.FieldManager;
import maqs.ehs.patient.KeyedResourceEntry;
import maqs.ehs.util.AppProperties;

public class LinkedFieldLookupDialog extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTextField searchTextField;
    private JPanel resultsPanel;
    private JTextField parentTextField;
    private JTextField linkedTextField;
    private FieldSvc sourceField;

    public LinkedFieldLookupDialog( JTextField parentTextField, JTextField linkedTextField, FieldSvc sourceField ) {
        this.parentTextField = parentTextField;
        this.linkedTextField = linkedTextField;
        this.sourceField = sourceField;
        this.setTitle( sourceField.getField().getLabel() );
        setContentPane( contentPane );
        setModal( true );
        getRootPane().setDefaultButton( buttonOK );

        buttonOK.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                onOK();
            }
        } );

        buttonCancel.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                onCancel();
            }
        } );

// call onCancel() when cross is clicked
        setDefaultCloseOperation( DO_NOTHING_ON_CLOSE );
        addWindowListener( new WindowAdapter() {
            public void windowClosing( WindowEvent e ) {
                onCancel();
            }
        } );

// call onCancel() on ESCAPE
        contentPane.registerKeyboardAction( new ActionListener() {
            public void actionPerformed( ActionEvent e ) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke( KeyEvent.VK_ESCAPE, 0 ), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT );


        searchTextField.addKeyListener( new TextFieldKeyListener() );

        //
        resultsPanel.setLayout( new BoxLayout( resultsPanel, BoxLayout.PAGE_AXIS ) );        

        // Center the dialog
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = ( screenSize.width - getWidth() ) / 2;
        int y = ( screenSize.height - getHeight() ) / 2;
        setLocation( x - 100, y - 100 );

        pack();
        setVisible( true );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout( new GridLayoutManager( 2, 1, new Insets( 10, 10, 10, 10 ), -1, -1 ) );
        final JPanel panel1 = new JPanel();
        panel1.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        contentPane.add( panel1, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false ) );
        final Spacer spacer1 = new Spacer();
        panel1.add( spacer1, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false ) );
        final JPanel panel2 = new JPanel();
        panel2.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1, true, false ) );
        panel1.add( panel2, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        buttonOK = new JButton();
        buttonOK.setText( "OK" );
        panel2.add( buttonOK, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
        buttonCancel = new JButton();
        buttonCancel.setText( "Cancel" );
        panel2.add( buttonCancel, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
        final JPanel panel3 = new JPanel();
        panel3.setLayout( new GridLayoutManager( 2, 1, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        contentPane.add( panel3, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        final JPanel panel4 = new JPanel();
        panel4.setLayout( new GridLayoutManager( 1, 2, new Insets( 0, 0, 0, 0 ), -1, -1 ) );
        panel3.add( panel4, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false ) );
        final JLabel label1 = new JLabel();
        label1.setText( "Search:" );
        panel4.add( label1, new GridConstraints( 0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false ) );
        searchTextField = new JTextField();
        panel4.add( searchTextField, new GridConstraints( 0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension( 150, -1 ), null, 0, false ) );
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add( scrollPane1, new GridConstraints( 1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension( 290, 320 ), null, 0, false ) );
        resultsPanel = new JPanel();
        resultsPanel.setLayout( new FlowLayout( FlowLayout.CENTER, 5, 5 ) );
        scrollPane1.setViewportView( resultsPanel );
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    class TextFieldKeyListener implements KeyListener {

        public void keyTyped( KeyEvent e ) {
        }

        public void keyPressed( KeyEvent e ) {
        }

        public void keyReleased( KeyEvent e ) {
            String searchKey = searchTextField.getText();
            if ( searchKey.length() > 2 ) setResults();
        }

        private void setResults() {
            String searchKey = searchTextField.getText();
            if ( !StringUtils.isEmpty( searchKey ) ) {
                searchKey = searchKey.trim();
                KeyedResource resource = FieldManager.getKeyedResource( sourceField.getField().getResourceId() );
                List<KeyedResourceEntry> hits = resource.searchResource( searchKey, AppProperties.getMaxSearches() );
                if ( !hits.isEmpty() && searchKey.length() > 2 ) {
                    resultsPanel.removeAll();
                    for ( KeyedResourceEntry hit : hits ) {
                        JPanel hitPanel = new JPanel( new FlowLayout( FlowLayout.LEFT ) );

                        JButton button = new JButton( ">" );
                        button.addActionListener( new ChooseResource( hit ) );
                        JLabel label = new JLabel( hit.getKey() + " : " + hit.getValue() );
                        hitPanel.add( button );
                        hitPanel.add( label );
                        resultsPanel.add( hitPanel );
                    }
                    paintAll( getGraphics() );
                } else {
                    resultsPanel.removeAll();
                    paintAll( getGraphics() );
                }
            } else {
                resultsPanel.removeAll();
                paintAll( getGraphics() );
            }

        }
    }


    private void onOK() {
// add your code here
        dispose();
    }

    private void onCancel() {
// add your code here if necessary
        dispose();
    }

    public static void main( String[] args ) {
        LinkedFieldLookupDialog dialog = new LinkedFieldLookupDialog( null, null, null );
        System.exit( 0 );
    }

    class ChooseResource implements ActionListener {
        private KeyedResourceEntry hit;

        public ChooseResource( KeyedResourceEntry hit ) {
            this.hit = hit;
        }

        public void actionPerformed( ActionEvent e ) {
            parentTextField.setText( hit.getKey() );
            linkedTextField.setText( hit.getValue() );
            dispose();
        }
    }
}
